name: Tech News Digest Scheduler

on:
  # Otomatik zamanlanmƒ±≈ü g√∂revler (ƒ∞stanbul saati)
  schedule:
    - cron: '35 1 * * *'  # Her g√ºn saat 01:35 - RSS Crawl (test i√ßin)
    - cron: '36 1 * * *'  # Her g√ºn saat 01:36 - Digest Send (test i√ßin)
  
  # Manuel tetikleme
  workflow_dispatch:
    inputs:
      job_type:
        description: 'Hangi job √ßalƒ±≈ütƒ±rƒ±lsƒ±n?'
        required: true
        default: 'crawl'
        type: choice
        options:
        - crawl
        - digest
        - both
      test_time:
        description: 'Test zamanƒ± (opsiyonel)'
        required: false
        type: string
        default: ''

jobs:
  scheduler:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
    
    - name: Run RSS Crawl
      if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.job_type == 'crawl' || github.event.inputs.job_type == 'both'))
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
        SMTP_PORT: ${{ secrets.SMTP_PORT }}
        SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
        SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
        FROM_EMAIL: ${{ secrets.FROM_EMAIL }}
        FROM_NAME: ${{ secrets.FROM_NAME }}
        DATABASE_TYPE: postgresql
        DAILY_CRAWL_HOUR: 1
        DAILY_CRAWL_MINUTE: 35
        DAILY_DIGEST_HOUR: 1
        DAILY_DIGEST_MINUTE: 36
      run: |
        cd backend
        python -c "
        import asyncio
        import sys
        import os
        from datetime import datetime
        import pytz
        
        # T√ºrkiye saati
        tz = pytz.timezone('Europe/Istanbul')
        current_time = datetime.now(tz)
        
        print(f'üïê RSS Crawl ba≈ülatƒ±lƒ±yor: {current_time.strftime("%Y-%m-%d %H:%M:%S %Z")}')
        
        sys.path.append(os.getcwd())
        from app.services.scheduler import scheduler_service
        from app.core.database import db_manager
        
        async def run_crawl():
            try:
                print('üìö RSS tarama ba≈ülatƒ±lƒ±yor...')
                db_manager.init_database()
                await scheduler_service.crawl_and_process_news()
                print('‚úÖ RSS tarama tamamlandƒ±')
            except Exception as e:
                print(f'‚ùå RSS tarama hatasƒ±: {e}')
                sys.exit(1)
        
        asyncio.run(run_crawl())
        "
    
    - name: Run Digest Send
      if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.job_type == 'digest' || github.event.inputs.job_type == 'both'))
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
        SMTP_PORT: ${{ secrets.SMTP_PORT }}
        SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
        SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
        FROM_EMAIL: ${{ secrets.FROM_EMAIL }}
        FROM_NAME: ${{ secrets.FROM_NAME }}
        DATABASE_TYPE: postgresql
        DAILY_CRAWL_HOUR: 1
        DAILY_CRAWL_MINUTE: 35
        DAILY_DIGEST_HOUR: 1
        DAILY_DIGEST_MINUTE: 36
      run: |
        cd backend
        python -c "
        import asyncio
        import sys
        import os
        from datetime import datetime
        import pytz
        
        # T√ºrkiye saati
        tz = pytz.timezone('Europe/Istanbul')
        current_time = datetime.now(tz)
        
        print(f'üìß Digest Send ba≈ülatƒ±lƒ±yor: {current_time.strftime("%Y-%m-%d %H:%M:%S %Z")}')
        
        sys.path.append(os.getcwd())
        from app.services.scheduler import scheduler_service
        from app.core.database import db_manager
        
        async def run_digest():
            try:
                print('üìß Digest g√∂nderimi ba≈ülatƒ±lƒ±yor...')
                db_manager.init_database()
                await scheduler_service.send_daily_digests()
                print('‚úÖ Digest g√∂nderimi tamamlandƒ±')
            except Exception as e:
                print(f'‚ùå Digest g√∂nderim hatasƒ±: {e}')
                sys.exit(1)
        
        asyncio.run(run_digest())
        "
    
    - name: Test Results
      if: always()
      run: |
        echo "üéØ Test tamamlandƒ±!"
        echo "üìä Job Type: ${{ github.event.inputs.job_type || 'scheduled' }}"
        echo "üïê Test Zamanƒ±: $(date)"
        echo "üåç Timezone: Europe/Istanbul" 